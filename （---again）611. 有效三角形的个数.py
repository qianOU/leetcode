class Solution:
    # 找寻 两个 最小的边 a,b 使得 a + b > c（最长边成立即可）
    # 使用二分查找可以加可 找到 c 的速率
    def triangleNumber(self, nums) -> int:
        nums.sort()
        ans = 0
        n = len(nums)
        for i in range(n):
            for j in range(i+1, n):
                l, r = j+1, n-1
                # 找到 小于 a+b 的最右侧位置
                target = nums[i] + nums[j]
                while l <= r:
                    mid = l + (r-l) // 2
                    if nums[mid] < target:
                        l = mid + 1
                    else:
                        r = mid - 1
                ans += r - j

        
        return ans 
    
    # 双指针
    # 优化： 实际上对于拍好序的 i,j 每次的边界 r 都是递增的(当固定i的时候)，所以也就不需要 r 在[j+1， n-1] 之间进行二分查找
    # 因此，对于每一个 i 我们只需要 一个 边界指针在 数组上游走就行了，不需要每次 变动 j 的时候，都回到 j+1 处
    def triangleNumber(self, nums) -> int:
        nums.sort()
        ans = 0
        n = len(nums)
        

        for i in range(n-2):
            if not nums[i]:
                continue
            k = i+2
            for j in range(i+1, n-1):
                while k < n and nums[i] + nums[j] > nums[k]:
                    k += 1
                ans += k - j - 1
        return ans

a  = [692,57,788,732,374,318,646,20,542,420,946,587,75,874,585,228,843,297,113,159,751,15,531,423,396,893,817,628,403,46,594,735,888,744,636,164,9,767,976,724,794,71,956,457,779,395,597,497,966,67,252,479,237,345,412,544,727,738,384,485,658,833,785,93,2,580,615,997,40,229,918,825,270,555,89,404,172,454,609,641,890,440,734,957,820,435,339,285,923,510,66,188,753,180,348,939,388,304,431,56,400,1,539,630,835,992,387,701,909,358,675,909,944,366,32,389,129,813,17,292,784,286,244,888,419,745,311,492,70,602,875,678,59,414,977,963,715,922,341,873,348,731,33,401,269,202,387,574,281,690,460,245,899,779,39,100,341,66,156,801,189,877,294,558,701,887,498,465,634,359,606,125,658,910,532,546,629,694,558,630,175,617,670,471,64,444,141,156,936,904,540,263,106,842,30,822,863,854,849,547,812,269,972,550,299,509,347,346,137,212,953,239,68,981,383,833,295,301,196,540,679,313,248,155,701,842,56,120,18,390,284,674,471,808,750,36,821,884,347,587,387,926,661,713,724,245,622,868,839,339,219,53,889,502,58,73,927,452,921,512,366,694,850,802,313,466,322,379,454,455,706,280,687,131,559,915,284,867,350,300,749,522,898,67,1,280,558,916,37,173,858,824,481,237,459,431,949,708,865,802,616,132,550,938,876,740,279,129,7,732,74,274,183,87,226,87,118,411,314,79,485,696,417,77,569,290,505,677,348,982,236,551,286,141,326,9,444,7,640,695,103,710,747,892,451,332,223,360,514,840,489,661,444,950,933,780,422,504,932,751,265,707,582,278,20,179,591,376,122,259,660,461,195,510,724,514,736,591,638,176,274,470,349,70,110,365,208,304,736,266,771,73,76,449,836,86,124,822,543,321,968,245,293,243,605,284,48,996,374,249,387,563,35,718,158,156,550,886,530,969,275,444,500,256,30,156,962,819,583,92,889,467,845,143,703,389,77,145,21,539,151,593,556,269,980,448,932,643,112,657,689,804,697,945,258,397,633,514,829,759,216,10,866,914,526,804,823,42,64,413,659,371,727,132,67,926,997,233,885,551,324,181,867,127,493,865,646,71,246,369,123,325,108,126,410,151,196,894,542,140,847,271,746,986,961,492,187,112,78,343,469,932,776,487,938,773,497,483,301,705,152,559,210,924,554,577,656,513,487,42,827,646,268,695,931,570,382,182,987,376,567,179,322,628,594,278,543,675,670,422,907,108,834,581,499,776,352,169,405,241,540,554,770,51,325,507,874,178,673,626,332,143,962,888,246,783,23,409,730,189,234,591,176,173,777,316,479,590,772,706,415,773,435,181,601,431,210,686,627,373,88,339,544,851,148,971,427,380,443,90,501,500,669,417,650,563,895,379,655,451,159,939,756,857,97,88,979,840,546,146,431,446,412,183,419,487,972,350,207,283,150,228,342,563,543,883,80,340,355,797,545,393,954,616,470,890,112,670,982,252,749,852,10,766,637,304,602,503,901,581,122,200,344,562,581,969,487,588,890,404,623,759,904,965,237,717,488,918,702,502,439,464,412,810,409,919,329,669,913,848,639,318,656,447,618,605,728,671,624,901,254,882,322,417,693,855,960,6,816,257,618,959,856,892,178,198,674,195,931,273,875,574,387,522,277,643,575,397,69,419,126,579,235,161,496,520,213,312,819,584,749,154,544,451,600,159,923,671,313,436,564,411,925,218,170,434,531,918,200,921,216,631,829,804,854,565,17,613,118,593,171,237,108,582,537,436,216,876,531,781,102,229,620,468,733,244,886,942,609,347,743,299,31,758,647,53,476,335,877,148,427,724,639,45,438,155,323,701,872,19,240,711,173,727,830,443,360,35,386,323,193,525,323,114,6,796,746,882,397,353,315,973,80,656,358,712,544,371,389,232,492,909,192,970,294,769,66,262,919,174,185,2,102,383,248,167,175,878,948,258,383,47,613,32,885,452,229,886,368,495,967,698,497,886,636,354,113,783,776,548,124,224,864,659,553,150,306,856,372,24,334,229,639,483,510,393,789,704,856,765,647,32,544,455,813,456,590,625,350,963,727,803,933,539,543,834,957,898,432,273,352,158,621,681,837,414,316,670,546,42,993,499,528,600,981,88,373,539,258,108,295,497,384,221,659,715,162,389,845,315,191,907,675,756,918,855,653,950,987,533,429,298,639,38,14,420,86,231]

print(Solution().triangleNumber(
a
))

